<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于ArrayList循环删除元素的坑</title>
    <link href="/2022/09/25/arraylist-delete-element-problem/"/>
    <url>/2022/09/25/arraylist-delete-element-problem/</url>
    
    <content type="html"><![CDATA[<p>昨天遇到了个不常见的错误：ConcurrentModificationException，场景是对于ArrayList中满足条件的元素进行删除，查看代码发现我用的是增强for循环，仔细回想自己大二学Java时好像遇到过这个坑，又踩了一遍…                                                                                                                                                                </p><h2 id="ArrayList遍历删除"><a href="#ArrayList遍历删除" class="headerlink" title="ArrayList遍历删除"></a>ArrayList遍历删除</h2><p>初始化需要用到的ArrayList，<strong>注意，此处list当中有两个 2 元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br><span class="hljs-keyword">static</span> &#123;<br>    list.add(<span class="hljs-number">1</span>);<br>    list.add(<span class="hljs-number">2</span>);<br>    list.add(<span class="hljs-number">2</span>);<br>    list.add(<span class="hljs-number">3</span>);<br>    list.add(<span class="hljs-number">4</span>);<br>    list.add(<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ArrayList的遍历删除分为4种：</strong></p><h3 id="普通for循环删除"><a href="#普通for循环删除" class="headerlink" title="普通for循环删除"></a>普通for循环删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.junit.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (list.get(i) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            list.remove(i);<br>        &#125;<br>    &#125;<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><p>**<code>踩坑：</code>**你以为会输出 [1, 3, 5]，但实际输出是</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925214913923.png"></p><p>list当中还保留了一个2，因为在删除第一个2以后，list大小发生了变化，而根据索引访问的下标为2的元素时，就访问到了3，第二个2向前推进了1位，<strong>所以普通for循环不适合删除多个满足条件的元素</strong>！</p><h3 id="增强for循环删除"><a href="#增强for循环删除" class="headerlink" title="增强for循环删除"></a>增强for循环删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.junit.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Integer integer : list) &#123;<br>        <span class="hljs-keyword">if</span> (integer % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) list.remove(integer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果普通for循环会留巨坑，那么增强for循环相对好点，因为他直接给你报错了，不会留坑</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925214941792.png"></p><h3 id="通过迭代器删除"><a href="#通过迭代器删除" class="headerlink" title="通过迭代器删除"></a>通过迭代器删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.junit.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span> &#123;<br>    Iterator&lt;Integer&gt; iterator = list.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        <span class="hljs-keyword">if</span> (iterator.next() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            iterator.remove();<br>        &#125;<br>    &#125;<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925214947452.png"></p><p>通过迭代器的remove方法可以正确删除满足条件的元素</p><h4 id="removeIf"><a href="#removeIf" class="headerlink" title="removeIf"></a>removeIf</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@org</span>.junit.Test<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;<br>    list.removeIf(integer -&gt; integer % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);<br>    System.out.println(list);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925214953642.png"></p><p>removeIf方法，传入一个判断型表达式Predicate&lt;? super E&gt;，也可以正确删除元素</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>普通for循环的原理已讲过，这里重点分析增强for循环和迭代器删除的区别</p><p>For-Each基于内部迭代器Itr的hasNext和next()，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>    <span class="hljs-type">int</span> cursor;       <span class="hljs-comment">// index of next element to return</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">// index of last element returned; -1 if no such</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br><br>    Itr() &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cursor != size;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> E <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        checkForComodification();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cursor;<br>        <span class="hljs-keyword">if</span> (i &gt;= size)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>        Object[] elementData = ArrayList.<span class="hljs-built_in">this</span>.elementData;<br>        <span class="hljs-keyword">if</span> (i &gt;= elementData.length)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        cursor = i + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> (E) elementData[lastRet = i];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>        checkForComodification();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            ArrayList.<span class="hljs-built_in">this</span>.remove(lastRet);<br>            cursor = lastRet;<br>            lastRet = -<span class="hljs-number">1</span>;<br>            expectedModCount = modCount;<br>        &#125; <span class="hljs-keyword">catch</span> (IndexOutOfBoundsException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEachRemaining</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> E&gt; consumer)</span> &#123;<br>        Objects.requireNonNull(consumer);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> ArrayList.<span class="hljs-built_in">this</span>.size;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cursor;<br>        <span class="hljs-keyword">if</span> (i &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">final</span> Object[] elementData = ArrayList.<span class="hljs-built_in">this</span>.elementData;<br>        <span class="hljs-keyword">if</span> (i &gt;= elementData.length) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;<br>            consumer.accept((E) elementData[i++]);<br>        &#125;<br>        <span class="hljs-comment">// update once at end of iteration to reduce heap write traffic</span><br>        cursor = i;<br>        lastRet = i - <span class="hljs-number">1</span>;<br>        checkForComodification();<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForComodification</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意属性expectedModCount，初始化赋值为ArrayList的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br></code></pre></td></tr></table></figure><p>modCount理解为ArrayList对象的修改次数</p><p><code>每次调用next方法都会先调用checkForComodification，检查Itr内部的expectedModCount和ArrayList的modCount是否一致，不一致则抛出ConcurrentModificationException</code></p><p>再看增强for循环删除元素调用的remove方法源码，<code>注意：这里的remove为ArrayList的remove</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (elementData[index] == <span class="hljs-literal">null</span>) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; index &lt; size; index++)<br>            <span class="hljs-keyword">if</span> (o.equals(elementData[index])) &#123;<br>                fastRemove(index);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>fastRemove</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fastRemove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">numMoved</span> <span class="hljs-operator">=</span> size - index - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (numMoved &gt; <span class="hljs-number">0</span>)<br>        System.arraycopy(elementData, index+<span class="hljs-number">1</span>, elementData, index,<br>                         numMoved);<br>    elementData[--size] = <span class="hljs-literal">null</span>; <span class="hljs-comment">// clear to let GC do its work</span><br>&#125;<br></code></pre></td></tr></table></figure><p>fastRemove中修改了ArrayList的属性modCount，让其自增，但是此时Itr内部的expectedModCount并没有修改，所以在执行了本次循环之后进入下一次循环（调用next），**<code>modCount != expectedModCount</code>**，即抛出了ConcurrentModificationException。</p><p>而采用迭代器删除元素，即Itr的remove方法，是不会改变ArrayList的modCount，此时expectedModCount &#x3D; modCount是成立的，所以checkForComodification并不会抛出异常，<strong>这就是iterator的remove和list的remove的区别！</strong></p><p>顺便看看removeIf的内部实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeIf</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> E&gt; filter)</span> &#123;<br>    Objects.requireNonNull(filter);<br>    <span class="hljs-comment">// figure out which elements are to be removed</span><br>    <span class="hljs-comment">// any exception thrown from the filter predicate at this stage</span><br>    <span class="hljs-comment">// will leave the collection unmodified</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">removeCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">BitSet</span> <span class="hljs-variable">removeSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BitSet</span>(size);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.size;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">E</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> (E) elementData[i];<br>        <span class="hljs-keyword">if</span> (filter.test(element)) &#123;<br>            removeSet.set(i);<br>            removeCount++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (modCount != expectedModCount) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// shift surviving elements left over the spaces left by removed elements</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">anyToRemove</span> <span class="hljs-operator">=</span> removeCount &gt; <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (anyToRemove) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">newSize</span> <span class="hljs-operator">=</span> size - removeCount;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=<span class="hljs-number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;<br>            i = removeSet.nextClearBit(i);<br>            elementData[j] = elementData[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k=newSize; k &lt; size; k++) &#123;<br>            elementData[k] = <span class="hljs-literal">null</span>;  <span class="hljs-comment">// Let gc do its work</span><br>        &#125;<br>        <span class="hljs-built_in">this</span>.size = newSize;<br>        <span class="hljs-keyword">if</span> (modCount != expectedModCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>        &#125;<br>        modCount++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> anyToRemove;<br>&#125;<br></code></pre></td></tr></table></figure><p>先拿到modCount并赋值给expectedModCount，再修改ArrayList的内部数组elementData，修改期间检查expectedModCount与modCount是否相等，由此决定是否抛出ConcurrentModificationException。</p><center>【END】</center>]]></content>
    
    
    <categories>
      
      <category>集合框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码解读</tag>
      
      <tag>问题复盘</tag>
      
      <tag>集合框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单了解Vue.nextTick</title>
    <link href="/2022/09/24/learning-about-nexttick/"/>
    <url>/2022/09/24/learning-about-nexttick/</url>
    
    <content type="html"><![CDATA[<p>今天简单了解了 <strong>Vue.nextTick([callback])</strong> 的用法，记录下p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>今天在开发中遇到一个问题，通过 v-if 渲染一个表格后，无法获取这个表格以及对其进行下一步操作，用一个demo演示就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;el-table v-if=&quot;tableVisible&quot; ref=&quot;table&quot;&gt;<br>            &lt;el-table-column prop=&quot;xxx&quot; label=&quot;xxx&quot; width=&quot;180&quot;&gt;&lt;/el-table-column&gt;<br>        &lt;/el-table&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name: &quot;Test&quot;,<br>    data() &#123;<br>        return &#123;<br>            tableVisible: false,<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        showTable() &#123;<br>            this.tableVisible = !this.tableVisible;<br>            const table = this.$refs[&#x27;table&#x27;];<br>            console.log(table);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>当我触发【showTable】方法时，获取到的变量 table 为 undefined，最终解决方法为：<strong>将获取dom的操作放入 Vue.nextTick(callback) 中</strong>，即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">showTable</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tableVisible</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">tableVisible</span>;<br>    <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> table = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;table&#x27;</span>];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(table)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="原理探究"><a href="#原理探究" class="headerlink" title="原理探究"></a>原理探究</h2><p>在Vue官网中有这样一段话：</p><blockquote><p>可能你还没有注意到，Vue 在更新 DOM 时是<strong>异步</strong>执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p><p>例如，当你设置 <code>vm.someData = &#39;new value&#39;</code>，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code>。这样回调函数将在 DOM 更新完成后被调用</p></blockquote><p><strong>理解：数据发生变化后，DOM 不会立即发生变化，如果想立即获取变化后的 DOM，则需要将操作放入 Vue.nextTick 中，因为 DOM 完成渲染后会执行 Vue.nextTick(callback) 中的回调函数，如下图所示。</strong></p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215142085.png" alt="vue.nextTick工作机制"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p><strong>Vue生命周期前3个钩子函数</strong>（beforeCreate、created、beforeCreate）如果要<strong>操作 DOM</strong>，一定要放在 nextTick 中，否则直接报错，因为<strong>此时 DOM 还没进行渲染</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">a</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;Hello World!&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215147310.png" alt="操作未渲染的DOM报错"></p><p>正确用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">a</span>.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;Hello World!1&#x27;</span>;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>改变数据后，想获取到最新的 DOM</strong>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;div ref=&quot;a&quot;&gt;&#123;&#123;a&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>export default &#123;<br>    name: &quot;Test&quot;,<br>    data() &#123;<br>        return &#123;<br>            a: &#x27;hello&#x27;<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        show() &#123;<br>            this.a = &#x27;world&#x27;;<br>            const a = this.$refs[&#x27;a&#x27;].innerText;<br>            console.log(a)<br>        &#125;<br>    &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>触发show方法，第一次打印出的结果为hello，不是最新的DOM，需获取最新则需要将获取方法作为nextTick的回调函数，即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&#x27;world&#x27;</span>;<br>    <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-property">innerText</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><strong>Vue.$nextTick返回的是一个Promise对象，因此可以使用ES2017 async&#x2F;await完成相同的事情</strong>，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-string">&#x27;world&#x27;</span>;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.$nextTick()<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>[<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-property">innerText</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>&#125;<br></code></pre></td></tr></table></figure><p>此时输出的a也是最新的值 world，而不会出现 hello。</p><center>【END】</center>]]></content>
    
    
    <categories>
      
      <category>问题复盘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>问题复盘</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo+GitHub的博客搭建</title>
    <link href="/2022/09/17/personal-blog-build-power-by-hexo/"/>
    <url>/2022/09/17/personal-blog-build-power-by-hexo/</url>
    
    <content type="html"><![CDATA[<p>很多平台都提供了博客功能，而这篇文章将教你基于Hexo + GitHub pages搭建个人博客系统，可自定义主题和域名，也是本站的建站基础p><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul><li>让JavaScript也可以成为服务端语言，官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li></ul><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul><li>版本控制、管理工具，官网：<a href="https://git-scm.com/">https://git-scm.com/</a></li></ul><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><ul><li><p>npm全局安装</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-cli</span> <span class="hljs-literal">-g</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><p><em>这里使用GitHub，Gitee也大同小异，只是在pages需要实名认证以及自定义域名时需要收费</em></p><h3 id="仓库名"><a href="#仓库名" class="headerlink" title="仓库名"></a>仓库名</h3><p><code>仓库名一定要是 &#123;用户名&#125;.github.io，仓库权限为public</code></p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220927103108652.png" alt="image-20220927103108652"></p><h2 id="本地博客"><a href="#本地博客" class="headerlink" title="本地博客"></a>本地博客</h2><p><em>创建一个本地文件夹作为博客的根目录，用于存放需要推送到github仓库的博客静态文件</em></p><ol><li><p>初始化（将hexo项目克隆到本地）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure></li><li><p>启动本地服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure></li><li><p>访问<a href="http://localhost:4000/">http://localhost:4000</a> ，可以看到博客页面，默认有一篇《Hello World》</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215020496.png" alt="image-20220925215020496"></p></li></ol><h2 id="部署远程"><a href="#部署远程" class="headerlink" title="部署远程"></a>部署远程</h2><ol><li><p>来到博客根目录，编辑文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span> <br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> &#123;<span class="hljs-string">仓库的地址</span>&#125;   <span class="hljs-comment"># 推荐使用SSH的地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>安装hexo部署工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p><code>博客根目录 \ source \ _posts</code>下新建markdown文件，这个就是博客正文内容</p></li><li><p>编辑完正文内容后，回到根目录，清理缓存、生成html、再部署即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li><li><p>等待提交完成后，过一会就可以通过 <a href="https://xxxxx.github.io/">https://xxxxx.github.io/</a> (xxxxx为github用户名)看到博客首页及内容了</p></li></ol><h2 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h2><h3 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h3><ul><li><p>github地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p></li><li><p>使用教程：<a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a></p></li><li><p>个人效果图：</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220927103323399.png" alt="image-20220927103323399"></p></li></ul><h2 id="集成评论"><a href="#集成评论" class="headerlink" title="集成评论"></a>集成评论</h2><ol><li><p>访问<a href="https://github.com/apps/utterances/">https://github.com/apps/utterances/</a> ，授权</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215040680.png" alt="image-20220925215040680"> </p></li><li><p>前往<a href="https://utteranc.es/">https://utteranc.es/</a> 进行配置</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215048597.png" alt="image-20220925215048597"> </p></li><li><p>选择主题，网页中添加如下js代码即可集成评论（github登录），一般hexo主题都可以在 <code>_config.yml</code>中配置是否启用评论，集成的插件类型，无需手动添加js代码</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215055220.png" alt="image-20220925215055220"></p><p>如 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">yangtao8453</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span> <span class="hljs-string">utterances</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme_dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><ol><li><p>配置域名指向存放博客静态文件的github仓库</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220925215101319.png"></p></li><li><p>GitHub设置</p><p><img src="https://picgo-1304850123.cos.ap-guangzhou.myqcloud.com/image-20220927104456086.png"></p></li><li><p>博客根目录 \ source 目录下添加一个 CNAME 文件，内容为个人域名，重新部署；或者仓库直接添加一个 CNAME文件，防止每次重新部署后都要手动在github的pages重新保存域名。</p></li></ol><center>【END】</center>]]></content>
    
    
    <categories>
      
      <category>个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>环境搭建</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
